(!) Если хотите, чтобы русский текст отображался корректно, используйте кодировку UTF-8 !!!
	Windows: В блокноте: Файл -> Сохранить как...(Ctrl + Shift + S) -> Снизу выбираем кодировку UTF-8)
	Windows: В Notepad++: Кодировки -> Преобразовать в UTF-8

========================================================================
Чтобы добавить в программу еще один алгоритм, поместите в эту папку .cs или .dll файл с кодом
Для удобства написания можно создать проект в удобной для вас IDE и после работы закинуть сюда .cs / .dll файл(ы)

В программе есть окно дебага, оно может помочь вам, если с вашим кодом что-то не так

========================================================================
Инструкция по написанию кода:

0. Стандартным набором пространств имен будет такой набор:
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

Добавлять можно, а удалять не рекомендуется



======================

1. Для нахождения кратчайшего пути в классе должен быть метод со следующей сигнатурой:
int[] FindBestPath(int[,] graph, int startNodeID, int endNodeID)

(!) Имя метода должно быть "FindBestPath"

Например:
int[] FindBestPath(int[,] inputGraph, int fromNode, int toNode)
{
	// code
}



======================

2. Для работы алгоритма обучения в классе должен быть метод со следующей сигнатурой:
(int[] path, int[,] graphCopy, string message, int nodeToHighlight)[] GetAlgorithmStep(int[,] inputGraph, int startNodeID, int endNodeID)

(!) Имя метода должно быть "GetAlgorithmStep"

[Возвращаемое значение - это массив кортежей (int[], int[,], string, int)],
где:
	первое (path) - путь, который будет строить пользователь
	второе (graphCopy) - отображаемый массив данных (матрица смежности или что-то другое). ОБЯЗАТЕЛЬНО КОПИРУЙТЕ МАССИВ, иначе во всех итерациях массив будет одинаковым
	третье (message) - сообщение, отображаемое сверху
	четвертое (nodeToHighlight) - ID узла, который будет подсвечиваться желтым (если это не нужно, скорми число -1 или любое другое отрицательное)

Например:
(int[] path, int[,] graphCopy, string message, int nodeToHighlight)[] GetAlgorithmStep(int[,] graph, int fromNode, int toNode)
{
	// code
}

Чтобы в отображаемом массиве (graphCopy) получить надпить "inf" (бесконечность), присвойте нужной ячейке int.MaxValue
	короче: int.MaxValue - это "inf"



======================

3. Чтобы у алгоритма было имя, добавьте в класс Свойство string Name с get-аксессором

Например:
class FloydAlgorithm
{
	string Name => "Алгоритм Флойда-Уоршелла";
}

Если такого свойства нет, будет браться имя класса (напр. "FloydAlgorithm", в данном случае)



======================

4. МОЖНО Добавлять вспомогательные классы/структуры и методы. Классы/структуры, где нет нужных методов, мешать не будут. Методы, не удовлетворяющие условиям выше, игнорируются



======================

5. Пример рабочего класса-алгоритма уже должен находится в этой папке (FloydAlgorithm.cs)



========================================================================
(!) Неважно, какой уровень доступа у классов, структур, свойств и методов (public / private), но лучше не прописывать модификаторы доступа вручную
Также неважно, статические члены или нет
Лучше всего - не статические, приватные члены, так точно ничего не сломается



Для продвинутых: код программы не защищен, поэтому если ОЧЕНЬ сильно надо что-то посмотреть/поменять в логике самой проги, dnSpy вам в руки
